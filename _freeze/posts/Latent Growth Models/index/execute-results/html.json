{
  "hash": "2a354e1148c1345f4bb3e66ce87c9f5c",
  "result": {
    "markdown": "---\ntitle: \"Latent Growth Models\"\nformat: \n  revealjs:\n    theme: league\n    transition: slide\n    background-transition: zoom\n    slide-number: c/t\n    show-slide-number: all\n    chalkboard: true\n    background-size: cover\n    smaller: true\n    echo: true\n    code-fold: true\n    code-summary: \"Show the code\"\nauthor: \"Dr Lazaros Gonidis\"\ndate: \"2025-03-03\"\nimage: \"image1.jpg\"\n---\n\n\n## Today's Aims\n\nToday we will discuss Latent Growth Modeling (LGM) also known as Latent Growth Curve Analysis (LGCA). We will discuss how it help us measure change over time (repeated measurements) and what advantages it has in comparison to other repeated measures analyses such as repeated measures ANOVA or hierarchical linear models.\n\nSpecifically we will cover:\n\n1.  Assumptions for LGM\n2.  Specifying LGM using lavaan\n3.  Interpreting output\n4.  Improving a model\n5.  Adding a covariate (predictor)\n\n## Notations in lavaan (refresher)\n\n-   **`~`** **predict**, used for regression of observed outcome to observed predictors\n\n-   **`=~`** **indicator**, used for latent variable to observed indicators\n\n-   **`~~`** **covariance**\n\n-   **`1*`** **fixes** **parameter** or **loading** to **1**\n\n-   **`NA*`** **frees** **parameter** or **loading**\n\n-   **`~1`** **intercept** or mean (e.g., **`x1 ~ 1`** estimates the mean of variable **`x1`**)\n\n-   **`a*`** **defines** the **parameter** 'a',\n\n## lavaan package\n\nToday we will also expand our lavaan usage beyond the analysis. We will also use the function **simulateData** to create random data for our **LGM**. If you like challenges try to randomly create data that will be suitable for **LGM**.\n\n## What is LGM?\n\nGenerally speaking, **LGM** is a special case of **CFA** where we incorporate a longitudinal element. This implies that we have a set of repeated measurements, at least **three**, and we want investigate change over these repeated time measurements.\n\n1.  LGM allows us to estimate means and covariances\n2.  LGM allows us to estimate observed and latent values\n3.  We will only focus on continuous measurements\n4.  All of our participants needs to be measured with the same time measurement information\n5.  We will also primarily focus on linear relationship (not exclusively though)\n\n## Let us describe a longitudinal/repeated measurements paradigm\n\nWe measure a psychological construct over **4** time points **T1, T2, T3, T4**. We are interested in investigating whether the measurements will **\"grow\"** (technically not grow) across these time points.\n\nWe will specify **two latent variables**, the **intercept** and the **slope**. Each latent variable will pass through each of the measurement points.\n\nWe will set the **intercept** factor loadings to 1 as we do not want to estimate them.\n\nWe will set the **slope** factor loadings to increasing **integer** values, usually starting from **0**.\n\n## Conceptual/Statistical Model\n\n![](model1.JPG)\n\n## Conceptual/Statistical Model continued\n\n![](model1matrix.JPG)\n\n## Let us generate some simulated data\n\nHere we just demonstrate the code, we will return to this code once we have explained our growth model in greater detail.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan)\nlibrary(tidyverse)\nset.seed(25256)\n\n# Define the latent growth model\nlgm_model1 <- '\ni =~ 1*T0 + 1*T1 +1*T2 +1*T3\ns =~ 0*T0 + 1*T1 +2*T2 +3*T3\ngender|0*t1\n'\n# Generate random data\nsimulated_data1 <- simulateData(lgm_model1, model.type = \"growth\")\nsimulated_data1 <- simulated_data1 |> \n  mutate(id = row_number())\n# Check the generated data\nhead(simulated_data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           T0         T1          T2           T3 gender id\n1 -0.02680785  1.3573130 -0.49530827 -1.343688458      2  1\n2  0.61185321  1.6168998 -0.09782515 -0.003418234      2  2\n3 -0.98348954 -0.7709135 -1.34749792 -0.299243736      2  3\n4  3.46177330  4.6955873  3.97025895  5.425533242      1  4\n5  1.05614482 -0.3240797  1.40799931  0.913335833      1  5\n6 -0.04346496  2.5826352  4.45787993  6.791255317      1  6\n```\n:::\n:::\n\n\n## Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the latent growth model\nlgm_model1 <- '\ni =~ 1*T0 + 1*T1 +1*T2 +1*T3\ns =~ 0*T0 + 1*T1 +2*T2 +3*T3\n'\nfit1 <- growth(lgm_model1, data = simulated_data1)\nsummary(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.17 ended normally after 25 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                         9\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                                 7.814\n  Degrees of freedom                                 5\n  P-value (Chi-square)                           0.167\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)\n  i =~                                                \n    T0                1.000                           \n    T1                1.000                           \n    T2                1.000                           \n    T3                1.000                           \n  s =~                                                \n    T0                0.000                           \n    T1                1.000                           \n    T2                2.000                           \n    T3                3.000                           \n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)\n  i ~~                                                \n    s                -0.065    0.073   -0.897    0.370\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)\n    i                -0.074    0.059   -1.241    0.214\n    s                 0.076    0.049    1.549    0.121\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)\n   .T0                0.919    0.118    7.810    0.000\n   .T1                0.973    0.080   12.218    0.000\n   .T2                1.212    0.117   10.333    0.000\n   .T3                0.941    0.211    4.466    0.000\n    i                 1.106    0.127    8.732    0.000\n    s                 1.020    0.080   12.792    0.000\n```\n:::\n:::\n\n\n## Reading through the output\n\n![](loadings.JPG)\n\n## Reading through the output\n\n![](intercepts.JPG)\n\n**i represents the mean of intercepts** for all our participants at **T0.**\n\n**s represents the mean of the slope,** as we move from each measurement time point to the next we should observe an increase of **0.051**\n\nFor example, we would expect the slope at the last time point to be:\n\n**s = -0.038 + 3x0.051**\n\n## Reading through the output\n\n![](variances.JPG)\n\nRemember dots denote residuals. **i** and **s** do not have a dot in front of them so these values denote **variances**.\n\n## Technically, this is the full model\n\n![](model1icpt.JPG)\n\n## Getting an even better look\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit1, standardized=TRUE, fit.measures=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.17 ended normally after 25 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                         9\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                                 7.814\n  Degrees of freedom                                 5\n  P-value (Chi-square)                           0.167\n\nModel Test Baseline Model:\n\n  Test statistic                              1130.081\n  Degrees of freedom                                 6\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.997\n  Tucker-Lewis Index (TLI)                       0.997\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -3781.086\n  Loglikelihood unrestricted model (H1)      -3777.179\n                                                      \n  Akaike (AIC)                                7580.172\n  Bayesian (BIC)                              7618.104\n  Sample-size adjusted Bayesian (SABIC)       7589.537\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.034\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.076\n  P-value H_0: RMSEA <= 0.050                    0.683\n  P-value H_0: RMSEA >= 0.080                    0.035\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.028\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i =~                                                                  \n    T0                1.000                               1.052    0.739\n    T1                1.000                               1.052    0.610\n    T2                1.000                               1.052    0.425\n    T3                1.000                               1.052    0.320\n  s =~                                                                  \n    T0                0.000                               0.000    0.000\n    T1                1.000                               1.010    0.586\n    T2                2.000                               2.020    0.815\n    T3                3.000                               3.030    0.920\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i ~~                                                                  \n    s                -0.065    0.073   -0.897    0.370   -0.062   -0.062\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n    i                -0.074    0.059   -1.241    0.214   -0.070   -0.070\n    s                 0.076    0.049    1.549    0.121    0.075    0.075\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .T0                0.919    0.118    7.810    0.000    0.919    0.454\n   .T1                0.973    0.080   12.218    0.000    0.973    0.328\n   .T2                1.212    0.117   10.333    0.000    1.212    0.198\n   .T3                0.941    0.211    4.466    0.000    0.941    0.087\n    i                 1.106    0.127    8.732    0.000    1.000    1.000\n    s                 1.020    0.080   12.792    0.000    1.000    1.000\n```\n:::\n:::\n\n\n## Looking at residuals\n\nWe can look at residuals to acquire more information about specific predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresiduals(fit1, type=\"cor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$type\n[1] \"cor.bollen\"\n\n$cov\n       T0     T1     T2     T3\nT0  0.000                     \nT1 -0.017  0.000              \nT2 -0.036  0.022  0.000       \nT3 -0.027  0.016 -0.001  0.000\n\n$mean\n    T0     T1     T2     T3 \n 0.018 -0.008 -0.026  0.011 \n```\n:::\n:::\n\n\n## Looking at modification indices\n\nEven though you can acquire modification indices be very mindful on what these might mean about your model. In **LGM** our predictors are more than just items. Our main goal is to investigate how our measurements change across time points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodificationindices(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox\n1    i =~  T0 4.708 -0.414  -0.435   -0.306   -0.306\n2    i =~  T1 3.915  0.217   0.228    0.132    0.132\n3    i =~  T2 0.020 -0.010  -0.010   -0.004   -0.004\n4    i =~  T3 0.318 -0.068  -0.072   -0.022   -0.022\n5    s =~  T0 3.938 -0.197  -0.199   -0.140   -0.140\n6    s =~  T1 3.230  0.104   0.105    0.061    0.061\n7    s =~  T2 0.023 -0.012  -0.012   -0.005   -0.005\n8    s =~  T3 1.526 -0.168  -0.170   -0.052   -0.052\n16  T0 ~1     1.167  0.086   0.086    0.061    0.061\n17  T1 ~1     0.139 -0.020  -0.020   -0.011   -0.011\n18  T2 ~1     2.246 -0.085  -0.085   -0.034   -0.034\n19  T3 ~1     2.853  0.143   0.143    0.043    0.043\n22  T0 ~~  T1 0.083  0.047   0.047    0.049    0.049\n23  T0 ~~  T2 1.137 -0.080  -0.080   -0.076   -0.076\n24  T0 ~~  T3 0.058  0.033   0.033    0.036    0.036\n25  T1 ~~  T2 2.033  0.128   0.128    0.118    0.118\n26  T1 ~~  T3 0.000  0.001   0.001    0.001    0.001\n27  T2 ~~  T3 3.468 -0.650  -0.650   -0.608   -0.608\n```\n:::\n:::\n\n\n## Constraining our Time Point Measurements\n\nWe can leave our observed residual variances free to be estimated but constrain all of them to be the same.\n\nDoes this ring a bell in terms of **hierarchical linear models?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlgm_model2 <- '\ni =~ 1*T0 + 1*T1 +1*T2 +1*T3\ns =~ 0*T0 + 1*T1 +2*T2 +3*T3\nT0 ~~ a*T0\nT1 ~~ a*T1\nT2 ~~ a*T2\nT3 ~~ a*T3\n'\nfit2 <- growth(lgm_model2, data = simulated_data1)\nsummary(fit2, standardized=TRUE, fit.measures=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.17 ended normally after 21 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                         9\n  Number of equality constraints                     3\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                                11.896\n  Degrees of freedom                                 8\n  P-value (Chi-square)                           0.156\n\nModel Test Baseline Model:\n\n  Test statistic                              1130.081\n  Degrees of freedom                                 6\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.997\n  Tucker-Lewis Index (TLI)                       0.997\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -3783.127\n  Loglikelihood unrestricted model (H1)      -3777.179\n                                                      \n  Akaike (AIC)                                7578.254\n  Bayesian (BIC)                              7603.542\n  Sample-size adjusted Bayesian (SABIC)       7584.497\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.031\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.066\n  P-value H_0: RMSEA <= 0.050                    0.783\n  P-value H_0: RMSEA >= 0.080                    0.007\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.029\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i =~                                                                  \n    T0                1.000                               1.016    0.705\n    T1                1.000                               1.016    0.585\n    T2                1.000                               1.016    0.416\n    T3                1.000                               1.016    0.308\n  s =~                                                                  \n    T0                0.000                               0.000    0.000\n    T1                1.000                               1.000    0.575\n    T2                2.000                               1.999    0.819\n    T3                3.000                               2.999    0.908\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i ~~                                                                  \n    s                -0.028    0.068   -0.403    0.687   -0.027   -0.027\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n    i                -0.076    0.059   -1.275    0.202   -0.074   -0.074\n    s                 0.075    0.049    1.525    0.127    0.075    0.075\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .T0         (a)    1.044    0.047   22.361    0.000    1.044    0.503\n   .T1         (a)    1.044    0.047   22.361    0.000    1.044    0.346\n   .T2         (a)    1.044    0.047   22.361    0.000    1.044    0.175\n   .T3         (a)    1.044    0.047   22.361    0.000    1.044    0.096\n    i                 1.032    0.116    8.886    0.000    1.000    1.000\n    s                 0.999    0.077   12.984    0.000    1.000    1.000\n```\n:::\n:::\n\n\n## Is this a better model? Or the same?\n\nBased on the output above is **model2** better than **model1**?\n\n## Visualization\n\nTypically you could acquire this at the start so you can get a feel of your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lcsm)\n\nplot_trajectories(data = simulated_data1,\n                  id_var = \"id\", \n                  var_list = c(\"T0\", \"T1\", \"T2\", \"T3\"),\n                  xlab = \"Time points T0-T3\",\n                  ylab = \"Measurement\",\n                  line_colour = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Can we also add a predictor to your model?\n\nLet us consider the research question that **gender** can predict differences in the **slope** and **intercept** latent variables. In other words, I want to explore whether there are **gender** differences in our longitudinal measurement.\n\nBefore we move on I want you to think now in terms of **endogenous** and **exogenous** variables.\n\n![](predictor.JPG){width=\"340\"}\n\n## Coding a predictor in our model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlgm_model3 <- '\ni =~ 1*T0 + 1*T1 +1*T2 +1*T3\ns =~ 0*T0 + 1*T1 +2*T2 +3*T3\ni ~ gender\ns ~ gender\nT0 ~~ a*T0\nT1 ~~ a*T1\nT2 ~~ a*T2\nT3 ~~ a*T3\n'\nfit3 <- growth(lgm_model3, data = simulated_data1)\nsummary(fit3, standardized=TRUE, fit.measures=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.17 ended normally after 33 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        11\n  Number of equality constraints                     3\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                                13.339\n  Degrees of freedom                                10\n  P-value (Chi-square)                           0.205\n\nModel Test Baseline Model:\n\n  Test statistic                              1138.870\n  Degrees of freedom                                10\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.997\n  Tucker-Lewis Index (TLI)                       0.997\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -3779.454\n  Loglikelihood unrestricted model (H1)      -3772.785\n                                                      \n  Akaike (AIC)                                7574.908\n  Bayesian (BIC)                              7608.625\n  Sample-size adjusted Bayesian (SABIC)       7583.233\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.026\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.058\n  P-value H_0: RMSEA <= 0.050                    0.874\n  P-value H_0: RMSEA >= 0.080                    0.001\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.025\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i =~                                                                  \n    T0                1.000                               1.016    0.705\n    T1                1.000                               1.016    0.585\n    T2                1.000                               1.016    0.416\n    T3                1.000                               1.016    0.308\n  s =~                                                                  \n    T0                0.000                               0.000    0.000\n    T1                1.000                               1.000    0.575\n    T2                2.000                               1.999    0.819\n    T3                3.000                               2.999    0.908\n\nRegressions:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  i ~                                                                   \n    gender           -0.302    0.118   -2.561    0.010   -0.298   -0.149\n  s ~                                                                   \n    gender            0.145    0.098    1.477    0.140    0.145    0.072\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n .i ~~                                                                  \n   .s                -0.017    0.068   -0.245    0.806   -0.017   -0.017\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .i                 0.383    0.188    2.030    0.042    0.377    0.377\n   .s                -0.145    0.157   -0.924    0.355   -0.145   -0.145\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .T0         (a)    1.044    0.047   22.361    0.000    1.044    0.503\n   .T1         (a)    1.044    0.047   22.361    0.000    1.044    0.346\n   .T2         (a)    1.044    0.047   22.361    0.000    1.044    0.175\n   .T3         (a)    1.044    0.047   22.361    0.000    1.044    0.096\n   .i                 1.010    0.115    8.795    0.000    0.978    0.978\n   .s                 0.994    0.077   12.971    0.000    0.995    0.995\n```\n:::\n:::\n\n\n## This week's exercises/challenges\n\n**Exercise 1:**\n\nI want you to specify the mode3 in lavaan but write all the necessary components in order to run it using the **cfa()** instead of **growth()**.\n\nIn other words think in terms of specifying, fixing, and freeing parameters as we would have done in a **CFA** in order to acquire the exact same values in your output. You can find the relevant project in our Posit Cloud under the name **Week 6 exercise**.\n\n**Exercise 2:**\n\nI want you to modify **model1** in order to test for **a quadratic projection instead of a linear one**. Think in terms of how a quadratic relation works and amend the slope accordingly.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}